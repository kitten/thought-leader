["deadlock: react native requires react 16 alpha. want to support react 16 with mobx-react, but doesn't support it. stuck...","and \"vue for react + mobx developer\" would even be twice as short","no problem, we did the same, syncing and applying those actions over websockets","in presentation preparation mode. so probably won't react to mentions, pm's, mails, tags, issues, whatever. but fear not, you'll manage.","no polling; reactivity combined with transparent tracking. bit like meteor / knockout","the current version 0.3 should be mostly api final, although some minor features are still missing","few days to stable api :)","circular-dependency-error is a loyal friend in commonjs that honors me with a visit now and then. **starts moving imports to end of file**","we finally upgraded to mobx 3 / mobx-react 4 no unexpected issues in the entire product. pretty cool.","super happy to see the active, consistent support and pr's by , , , & many others.","i would say as long as you are ok with coupling state and component tree (structure) and async state updates?","serializr is nice for classes, but there are quite libs around for that. if it is really simple manual + mobx.tojs ,ogjt work","don't confuse tsconfig and jsconfig :)","conceptually i like browserify (streaming transformations which are piped together) but webpack is more flexible / does better job","the thing with architecture is that i like browserify but i the end always use webpack","afaik, not, `alias` is a built-in sh command, and not an executable. it wouldn't live on beyond your script. same for env vars","computed vals dispose subscriptions and fall back to lazy evaluation if nobody is observing them. won't work with explicit sub","if you use decorators try react hot loader 2-alpha.4. i didn't use it anymore recently though","doh, that exploded with webpack 2. unpubished & to be continued :)","yeah that is where i try to stay away from and why i like react:) had only one case so far: measuring dimensions","react: you shouldn't be messing with the dom; just output device. if still need dom work just use didupdate hook","synchronous state updates is a different concept then synchronous renders. mobx + react also renders async","react-app-rewired by is also a great option","yes, and put the logic of reaction into the computed. reaction isn't needed here","til: finddomnode won't work with react-test-renderer. q: what is the best way to detect this upfront to take another code path?","note that the blog is quite outdated as it aimed at typescript 1. typescript 2 introduced some major improvements in this area!","punishing the wrong people. do the inverse :) throw in dev, warn in minified","websockets and delta's might help?","they are actual observables as in the observer-observable programming pattern, but they are not subscribable streams as in rx","afaik no, but didn't do a deep investigation. already handles both legacy and typescript impls, so i don't expect much problems","seriously thinking about doing the next workshop with instead of babel.guides attendees much better, feels more mature","mobx-react@4.1.2 fixes annoying 4+ issue where errors thrown by render where swallowed and a different error was thrown instead","refactoring our house. it's the kind of development that lacks version control, except for blaming","looking good! note that action automatically applies transaction","typescript is awesome and still improving fast","no, but you can use a flag yourself to suppress the effect or use reaction","depends? if popping yes, but if changing e.g. selection programmatically, i want to update url as effect","yeah that was what i wanted to prevent :) want to go full functional comps / avoid making c's browsers","apologies, didn' t intend to blame babel but myself on relying so much on ide assistance ;)","no it's not a problem with babel itself, just noticing how much more productive i am with type checking","today: instead of . wasting times on stupid mistakes. feel handicapped. others r so smart that they can do this..","no me neither. if there is no key, elements are technically indistinguishable, although we intend to distinguish them","component reconciliation and trying to give focus initially to an input, seem to be each other rivals in","as a result of migrating to a mono repo and aligning code style across teams, now back to semicolons","it is a basic fact in the real world action reaction is enforced by laws of nature. just brings this to js","if applicable you could also do it as post processing; iterate all exported comps from your comp lib, apply observer","nope, frontend is and js. but loads of scala in the backend","computed asjson prop or serializr. there is also open issue to support custom tojs overrides","there is also no digest / change detection like in angular. passing a boolean is as expensive as passing whole global space","i saw that actually once but was other issue: storing react elements in a non shallow observable prop","same date as react-europe...","never mind, don't want to be known as too lazy to google :-p","no, that would be highly confusion. instead add e.g. a state flag that expresses when you don't want certain reactions","it's amazing how many issues are filed, telling about an error, without actually providing relevant code or even the error message...","nice! check my reactnext talk or the reactive2015 talk demo for more on that","used new react tree approach first: but: hard to test. more context issues.","started prepping workshop. now jackshaving tooling to generate slides from markdown with hot reload. life is simpler when you are not a dev","nothing really exciting imho, but cleaner and regular api around observable. lots of small improvements.","after years of advancing mobile tech, finally feels my phone is up to par with a remote control. starting music, videos, it can do it all!","tdd helps building a new feature right. changelog driven development helps building the right new features. write and share before coding!","yep, want to keep up to the promise that no stale computed values can be observed in a mobx app :)","can yarn be used as npm dependency? running yarn from node_modules/.bin/yarn dies utterly (can't find it's own modules)","it is still a bit unclear to me how the latter two items (data transport technicalities) relate to either mobx or redux?","* dynamic rules, filters or cascading computations play a big role in your app * same data is rendered in many diff. contexts","visual studio code. not sure if there is an additional plugin in action. i don't think so, native git support is pretty good","yes technically no problem. can you open issue? curious to the use cases","if 2 components are scheduled in same batch (e.g. event) parent renders first. afaik.","i think that is quite generally applicable indeed :)","awesome! have been looking forward for a long time for something like prettier! will it support typescript?","nope sorry. will also be workshops at react europe btw","sure! for mobx it doesn't matter technically how you get your data at a certain place","@arrayjam yep this is exactly the kind of problem mobx is designed for","1 huge reduction in risk of refactorings 2 api contract communication & (3) verification","write your domain in the simplest way you can think of in js. then throw it into observable (or decorate). done","yeah this also allows observer based react components to not crash the app :)","3 will have clear error semantics: computed: re-throw to any consumer. reactions: isolated container from which no exception escapes","design meetings should be killed. they create 'insider only info'. arguments are forgotten in weeks. use offline public discussions instead","thanks for your -> typings converter! it's a great tool for libs that have first class ts support!","awesome and much appreciated!","happy new year to all!","depends if your onchange is interested in the new value (e.g. serialized json), or how the value came into being (attr x changed)","tip: `observe` fires in reaction to mutations, reactions (`autorun` etc) fire in reaction to new values. the latter usually suffices","almost 2017. and it is still hard to setup testing with: ts transpilation, code coverage, watch mode, debugger support. pick any two...","webpack file as computed value from settings, a debounced reaction to save and restart webpack.","opinionated way of using mobx, a model based state tree. with built-in replayable actions, json patches, time travel,l refs","no; you can target es6 in typescript (/me in brain freeze after trying to answer negative question unambigously ;-))","guilty :-s. (and also because phantomjs didn't support it)","definitely, some fundamentally different design choice (will elaborate on that later), but proves viability of proxies","use componentwillmount, dispose listeners in componentwillunmount. what you do will die without hmr etc as well","hot module reloading (webpack) and react hot loader are two different things. (rhl uses hmr, targets component classes)","action batches everything until end of the func. normal async rules apply; a callback happens *after* func; needs own action","in most domains required data can be predicted by just looking at the url (the state), without knowing the actual components","'s componentwillmount is an anti-pattern. separate logic and ui instead. if you master that; ssr and routing become trivial","yep but that is only one place. call site and in-component type info is the most important","yep, exactly that :) (could even be done inside small components themselves)","today: fixing bugs in 1.5 year old react code, caused by the fact that i stored validation errors in state, instead of deriving them","but hard to achieve manually in your code as the set of values used often changes dynamically over time. that makes it hard to beat the perf","a low percentage of data being changed will always favor mobx, as it doesnt need to run selectors. that's what it was designed for","idea: should action automatically bind in if used with (extend)observable? cc . like react.createclass","feature request! webmodeler team mugs :) bad jokes allowed.","thanks! much appreciated","(not done yet btw, i'm just realizing that it will be much better than anything i would have designed on my own)","assuming that state data is observable, wrapping svelte rendering code in autorun at proper points should just work","yep, originally i expected people to compare mobx with rxjs, but that barely happens :-p","not saying wrong, just indicates these concepts should be made more clear from api / docs","?!! i have never seen a forceupdate in a based app so far, deep tracking is default. you must be missing something","weird observation, building 4 atm, before 3, so that 3 is as helpful as possible in migrating from 2 to 4...","weird observation, building 4 atm, before 3, so that 3 is as helpful as possible in migrating from 2 to 4...","nope, mobx.tojs, but that is similar","not so crazy, but generic incremental build tool, like make, but better :)","then just use the normal syntax? ` class bla extend react.component { .. }` or `observer(react.createclass({})`","i sometimes force react to throw a subtree away (new key); often more straightforward then merging new props with current state","it will interfere, but its not a stateless comp, so conceptually the optimization principles don't apply here","dear diary, tomorrow i'm gonna fix all the confusion around event handler binding in react land. but first","it is quite use case specific, some apps will really benefit, for most apps it won't change that much i think.","thanks for all the contributions to mobx-react@4, , , , !","create a tsconfig.json (tsc --init) and set the compiler flag to true","quick, somebody tell me `mobx-react@4.0.0-rc.4` is working correctly on :) (after some webpack changes)","no i mean the ember benchmark. it's very slow?","ah that is awesome then i just check for api existence and all should be fine","i think it is a great feature to optimize multiple, synchronous, render triggers","but it is still nice to optimize if you trigger multiple setstates from incoming socket messages etc?","in mobx-react@4 all reactions will run in batched updates for the most optimal integration. tnx for the idea","mobx-react@4.0.0-rc.3 is out. need testers! especially for perf in complex projects and smoke tests on native. much appreciated!","check serializr package ;-) (or mobx-state-tree for future work)","til \"npm update --save-dev\" updates normal deps and then saves them as dev deps. wut?","til: \"rm -rf node_modules && npm update --save && npm update --save-dev\" actually does \"what npm update --save --save-dev\" should do","non-obtrusive abstraction, declarative component model, html-in-js, good escape hatches","the one should always lead to the other, and only comparing dom props makes test less noisy / fragile when internal apis change","but anyway own component props themself don't seem really interesting, compared to the props of the dom elements produced","and `enzyme-to-json`, so if it is a bug, then in the latter","tip: if you remove all props from non-dom components, snapshots will become very clean and it avoids issues with cycles in prop data","the latter are the official bindings, the first is a router library","might be interested in writing a book on react & mobx. please confirm he should","ah part of the culprit is probably that this happened in an async callback","jest pro tip: when diffing large component tree snapshot: `jest -u && git diff -w` gives a lot more insight compared to `jest` cc:","we are using it in a project with four dev teams , in a large & complicated domain (500+ domain data classes)","`observer` regions can now be tested using mobx-react@4.0.0-beta.1 :)","yeah that is why i like the component idea, it re-uses the composability mechanism in react itself. although a bit verbose","but your approach me be nicer, as it uses real expressions","code style guidelines. would they be battled less fiercely if called not-code-style-laws? can't wait for first projectional ide :)","don' rely on implicit ordering of subscriptions, make it explicit if there is ordering. mobx determines optimal order on the fly","should not be shared, have seen it before though, related to wrong babel setup if i remember correctly","...extends component { field = value } should work ootb. or extendobservable in constructor / willmount","but there are certainly do's and dont's when it come to typescript setup and tooling. takes time to benefit","funny, had opposite experience when starting babel (already knew ts): configuring transpilation is cumbersome","? i usually recommend, especially for larger apps, to largely avoid making subscriptions in comps in the first place. kills v=f(d)","easy, subscribe to store, update an observable reference that stores the state. if using redux smart comps not needed though","yep that is a good point, although from reactivity persp. it doesnt change much. author has no twittr handle:(","means through closure : `import store; const app = observer(() => store.counter)`. doesnt matter where observables originate","yes first declare your component, then: export default observer (mycomponent)","i really like the community. largely because it is not just about tech, but also about people, life, being a programmer in general","note that the package has been rebranded as mobx","mode. this check is aimed at peer deps / packages that want to share their observables / tracking state","use objects.entries().map(x => comp) or objects.values().map(..), so that your created components are actually returned","i install client side dependencies in my apps using `npm install package ....`","issue or it didn't happen!","on long term yep, on short term, i notice all those es6 sugars being confusing / slower to read for new devs.","yeah should be used with care. instanceof checks also tend to mess up in complex multi package projects","need package name. should be short and fun, or descriptive?","oss maintainers help out mostly for free, so please show appreciation by at least providing reproducible issues. don't dump *your* problem","ts / flow will be up to par quickly if they miss something and have a strong eco system / tooling already?","exactly, we use those quite extensively; i prefer private npm over local artifactory for cloud deployments etc","yes, i recognize a lot of problems. no private package support yet is a deal breaker atm","no, w7 atm. w10 is probably better (docker tools themselves are also different). but the docker-machine indirection is tricky","trying to make docker work on windows. calling windows an os is like calling html a programming language","i think ts is not interesting because it transpiles, but because of types. is the concern it is too far behind with babel?","wednesday: managing large code bases. how do you manage multiple packages with npm. best practices, tools...?","tuesday: strong typing libs: flow / typescript, why do / don't you use them?","i work on a dutch founded company . a pure software technology firm. hiring, so if interested in working with latest tech let me know","hmmm that is interesting, never needed to do something like that. would be interesting to see the code indeed","ah yes, simple way to optimize that is to use `expr` in your render function or introduce additional computed fields.","anything specific tricky stuff you run into? most hooks can be avoided, but still ok to use them. depends on app architecture","would violate always consistent guarantee. instead store the cancel state as observable and deal with it *in* your reaction","bummer. the typings are in the package, so they should be referrable. they are compatible afaik?","the package ships with typescript typings. i hope flow will pick those up automatically as well?","did such a cool thing today. took redux app, replaced state & reducers with . kept actions & comps. still works. more @","transparent tracking + reactivity allows teams to independently develop features in the same app in a very decoupled way.","til: if react shouldcomponentupdate returns false, props are still updated. so, it is not about \"should update\" but about \"should render\".","autorun(() => history.push(tojs(mystate)) usually does the the trick","no need to fight over this ;-). with mobx one *can* have transaction actions, if you design for it, but not ootb","at i explained that mobx is designed for multi team apps; it offers higher degree of decoupling. online soon","no, it just offers features beyond simple dnd scenarios, at the cost of more compl. api ;)","yes found react-draggable more straightforward to set up. draggablecore fits naturally","personally i have good experiences with react-draggable as well","started building stuff for , i'm pretty excited about it. hope i finish it in time though :)","yep i remember, i was pretty amazed :-d","ember lack transparent tracking. nor is ember reactivity general applicable (afaik) mobx is more utility belt like rxjs","it it just me? componentwillreceiveprops might be code smell that comp needs a key, instead of being recycled for different things","throw away everything that relates to type definitions. npm i @types/react etc. done. worked, didn't read docs","typescript 2.0 is marvelous at times. the system! and surprisingly i use the `never` type quite often (pun intended)","observer does nothing special? just a reaction. why wouldn't the autorun work? not sure whether i get the question :)","draggablecore from react-draggable fits nicely","typescript is awesome imho. very good ide support / explicit contracts are great for multi team. didn't use flow recently","react-faq by is becoming quite a nice collection with good explanations of different concepts!","yeah, but then, context is and isn't contained in intermediate components","i'll try to write my thoughts down. i think both redux and rr can work optimal within current system","but it still prevents context propagation if i remember correctly? (been a while)","then by all means stick to redux, at least for your own peace of mind","note that observer *only* tracks 'render', which does nothing in your app. your backbone render should go in autorun probably","gist or it didn't happen!","you can do it on just your smart components and then pass the data down as plain objects (using tojs)","not even strictly necessary. one can stick to reference (boxed) values and build all collections with those.","actually more close to meteor. ember is not transparent reactive. that makes quite a difference to work with","finally removed routing / data fetch logic from webmodeler components as blogged earlier. solved actual bugs, much easier to test","definitely. would be much appreciated :)","yeah, can't wait for es6 proxies to be supported by all major browser to address these and similar cases!","like, higher order components? nope, but you can get the data by using mobx.extras.getdependencytree(component.render)","no that is an intended constraint to force you to keep computing values pure. reactions like autorun are for side effects","a lot more on that next week if you happen to be there :-).","entirely different way of thinking. redux people often struggle initially. if you have example problem i gladly help","the beauty of computed is that tracking happens, without needing to pick the proper data from the state. but it is an","not everything needs computed. they are just memoization points, but without, tracking still happens","computeds can react to vars in closure. just wrap a function around them if you need params. note that","fun experiment: skip webpack completely by running our app in electron with ts-node + postcss require hooks. skips a lot of build time","frp always has side effects as it requires inversion of control. dispatch action in redux, push event in rx etc..","build small functions, test them, use them from computed, autorun etc.","..your gonna write javascript in jsx and eval :) <function-call name=\"alert\"> <param>hello world</param> </function-call>","always convert observables to plain values before passing it to external components. converting component should be observer","throw-it-over-the-hedge :) we use sass and css modules. they are fine. there might be better things. no clue :-p.","they are only useful with react :) (the api's could be used for devtools with any other lib though)","no, react-router is ok. but i think conceptually it is doing to much. nice for starters, might be in the way in the long run","typescript mainly . but you can create a jsconfig file in your project which defines which language features you need","step into usually does the trick. or debugger statements. can remember cases where i needed to disable source maps","keeping the cost of new features low in a fast growing, complex code base, with some real life examples","had an idea to create a babel plugin that automatically to marks cb's / thens created in actions as actions","reactivity: system in which any future permutation of a concept is automatically propagated to all related / dependent concepts","seems we'll meet at anyway :) much better platform to exchange ideas then twitter :)","the idea here is that only (2) should happen (in quite specific cases)","typescript 2 with nullables is really nice ! q: can one generate typings that are compatible with ts 1 and use nullables?","know that feeling, \"facebook\" doesn't bring me to facebook but react docs. poor friends...","for example accessing computed values inside actions is now memoized as well, reactions can recover from errors","2.5 is coming. major rewrite of the core algorithm by , with insanely smart optimizations. kudo's for his hard work","wanted to write simple code. computers are smart, they are better in tracking what relates to what than we humans can (encode)","i think react-router makes lot's of sense when using vanilla react. with state mgmt lib might become a fifth wheel","yes observe (or spy) events should contain all the data necessary to reverse apply a patch","repro probably only needs a similar datastructure to be build up programmatically","writing small demo app for next blog post on authentication, routing and data fetching. pretty excited how concise it is","many lint settings and flame wars have been prevented by not supporting single quotes or dangling comma's in json :)","good one, will do at some point. comparable with google docs' operational transformation. cc","interesting, primary mobx use case is a multi user, collaborative visual app dev studio , devved by multiple teams :)","happy to announce that i will speak at again! last year: first public appearance of . planning for cool new stuff again","ah i was looking for something like that, a router that doesn't build the view but update the state instead","q: if you don't use react-router for routing, what do you use? director?","at mendix we have our mobx powered app domain sdk completely decoupled from the (totally different)(3th party) apps that use it","people often assume that is designed for simple apps because it is simple to use and doesn't enforce a standard architecture","i heard people doing that, migrate per component / feature. don't know of any public examples, but shouldnt cause too much issues","no, the difference is mainly in the code, not in the output","tip: always make sure context is shallowly immutable, avoids issues with purerendermixin components not propagating context changes","yes but only on short term. eventually something better will appear. e.g. svn -> git -> ..?. better learn to learn","the difference between building airplanes and software is that in the latter case you never build the same twice","actually, please learn redux anyway :) it will teach you more fundamental, enriching programming pattern then mobx i think.","if people migrate from redux to mobx with success, it proves to me the feasibility of mobx. 'cause redux is a really good thing","i concur. mobx was designed for app with really complex data model (500+ concepts) but straightforward interactions","we use extensively both server and client side.","can browserify (like webpack) handle external (peer) deps for umd builds? --external doesn't cut it","inspiration came from and . but generically applicable, more efficient, dynamic deps and no glitches","is normal js behavior; you throw away one object, assign another. if you want to track that, foo prop also needs to be observable","... or just arguments + apply?","the latter. it benefits by far the most from mobx and will remain performant if your app grows","nope, no clue, just showed up in google search :)","want: npm service that takes package.json and returns all deps as zip from cache. prob faster than the gazillion requests npm now uses :)","only experience with typescript, which is really a great help beyond the initial setup pain (not typing deps makes life lot easier)","everyone should use typescript / flow to reward lib authors, as they no longer need to write input validations *and* provide typings :)","tweetdeck mainly, besides that searching manually now and then and enabling mail subscriptions where possible :)","people often want more guidance in how apps are structured. its both a strength and weakness of mobx that it doesn't enforce arch","typescript? use `constructor(private name: string) {}`. declares the field and assigns it in one go :)","the fun is mainly, no transpilation. no wait times. debugging on source. but fixed already bugs typescript would have caught..","no, a typo i think, could be either 'me' or 'by' ;) wanted to place comment, apparently became response :)","exactly. if you have a simple oss example app btw i gladly help out.","how i would approach it: path is a derived value based on the structure of your data. in fs: path = parentpath + basename","if order is a thing, use an array in both redux and mobx, or sort on the fly. normaliz. is about flattening refs, not col type.","not read entirely yet, but first question: why different collections? if you use map in redux (order unimportant)use map in mobx","could i humbly suggest this one for the next js weekly? would be awesome :)","maybe just use computed in view model? i think reaction or when could be used to determine next step from observables?","..which is much appreciated!","yep. in general i recommend using reactions, but in some cases events are more important then values and then it is useful","you can use provider + inject from the mobx-react package instead. or just set contexttypes by hand","^ interesting for next js issue?","presentation comps sounds like use props. otherwise use context based mechanism like mobx-react provider + inject.","no, computed values only memoize if in use by reactions. like . but you can simulate this using `observe(thing, () => {})`","2.4.0 has been released! much fast! get it while it's hot! also fixes a typescript related decorator regression bugs.","wrote some cool, progressive optimizations. mobx@2.4.0-beta1 should be significant faster with large data / component collections.","agreed, mobx stores should in general have a higher degree of decoupling compared to redux state tree","yeah that is why by design mobx has no digest loop. everything derived in the same stack helps a lot.","no, newer targets as well. but i really like the fact that iterall provides a standardizes approach for es5","see readme of mobx-react it has a small example","i really like visual studio code. less shiny but solid, well supported and lightweight","consistent handling of html / style attrs & events was key for us when choosing react. much more important then 20kb!","make sure to use asreference again, to avoid making the internal react state of the component observable","technically yes, not entirely sure react itself can handle that? probably it can.","we split a quite large repo with submodule pointers into smaller ones. no pointers, just npm deps. so far feels lot simpler","it is combinable, but mobx only reacts to mutable things. which might be everything or some refs sprinkled through your state","i think this was a missing piece in the mobx docs. less \"magic\" or \"why doesn't it react?!\" more: \"doh, of course!\"","yep that is by design :) your app domain + logic is the primary source of business value. should have great flexibility there.","dependency injection like inversifyjs also works nicely cc","group per feature. within a feature split into 'components' and 'model'. opt 'controller': static utils/logic","thanks, useful info for our design meeting!","4 teams. 10+ npm packages. so, multi repo or mono repo?","question: does anybody know good blogs about managing node projects consisting of multiple packages? versioning / ci / local dev flow etc","it is an unique opportunity, build a boilerplate project that is more popular than the project it is boilerplating for","check the last part of my talk at react amsterdam to get a very rough idea how we scale with it","tomorrow at : mobx magic: in depth explanation on how mobx determines what is the minimal set of code to be re-run","google presentations","spectacle is great for code snippets. editor would be ideal for rough structure, list, layouts etc.","for the first time building an extensive slide deck using spectacle. really enjoying it. can't wait for the editor :-d.","you guys arrived for ruhrjs?","thanks for building it :)","in mobx only reactions keep things alive. computed props are suspended automatically. beyond reactions normal gc rules apply","`provider` can even be emulated when testing by just passing the stores as props to components instead of by provider","check, yes i am not sure about that either. pulling it in makes it cleaner and easier to setup, but increases api surface","try to avoid re-rendering comps that map over huge collections. much to win there. can you share code? i'll take a look","just released mobx 2.3.3: fixes issue where react native error screen showed the wrong error if an exception occurred.","context and di solve similar issues. context is easier to scope to part of comp tree and more common in react land. both are ok","componentwillmount (+ autorun if automatic) or just in the store itself","don't convert for the sake of conversion! if your app works fine with redux keep it. you can always try mobx later","afaik context is passed in as second argument to stateless function components","wrote blog post about how you don't need setstate when using . appears that most mobx users did that for ages already :-p","should be easy, mobx-react is 200loc, from which 100loc devtool support which you can skip","that is on my mind indeed. one that reconciles much faster & doesn't need keys. but just for fun. react is much more then vdom","package includes (non global) store that manages instances, reused indeed. docs are tsdoc & some diagram generator","i was objecting to: \"if static types help with refactoring, code is too much coupled\"","our app domain >500 classes. if you search any name by string, 75% false matches. by type? 0%","no, but you should be able to merge it into an mobx map (same api)","@akylealex make sure to do react perf tests in production builds, makes a lot of difference!","so i see it as an efficiency gain during dev and especially maintenance, more than as bug hunt tool","yes that surprised me as well. seems like babel generates uglier but more efficient js for classes.","yes & no. i have superficial idea how react works. no clue how jpeg works. but both are reliable, so it dont really care","tip: keep components simple by making sure they are not reused for different instances of the domain concept by providing a 'key'","thanks for elaborating on this dan, really appreciate it! thanks for the unprejudiced attitude in general","exactly hence app complexity is primarily result of state graph complexty","remember todomvc benchmark? 'changing' requirements influenced a lot, made it non-minimal","rule of thumb; if you want to modify some observables in autorun / reaction (so as a side effect), you missed a derivation","in redux shape seems more like artifact produced by actions & component tree","yep, point being, in mobx you start with designing minimal state shape,","yes (well actually the inverse, i think redux normalization is more like db de-normalization, still don't get why it's called so)","sophisticated in it's optimizations; its designed trp as computational problem instead of a util to invalidate ui","i think people are to scared about unrestricted modifications. it is only scary if it can cause inconsistencies in your app.","i see redux users have similar data in multiple places in statetree that is culprit; harder to maintain","basically redux lets you think about everything in terms of action, mobx in terms of state","makes all the difference in the world in tracability. sure, still more fluff than redux","unlike ko, meteor, angular; mobx has no digest / async stuff. mutation -> derivation, always same stack","we use it in app domain with 500 concepts, 50kloc app, no mobx scalability issue so far","as long people keep thinking in the pillars action, state, derivation, reaction, it scales","mobx offers more architectural freedom, so easier to mess up. but it does scale into really large apps","stop whining/ fixing boilerplate in redux; use the alternative. vice versa for time travel. no silver bullets","i think a few alternatives make everybody win; choices will be more deliberate, no need for one size fits all","want to see more of the web based modeler? visit the break out session at 13:45 by , room t 2.2","tnx for the tip! applying that now","really cool! and i think this can be taken even further: have the whole vdom as a reactive transformation of the state!","visit the mendix sdk track .00 to learn how to write sdk scripts and do cool tricks with your mendix models. with live demo!","most requested mobx features: standardized serialization approach, context / provider mechanism. will build both!","i think reactions cover this nicely, especially as they don't require queries in strings. strong typing ftw","idea for world peace: tab indents = code. spaces = markdown. compilers uses the first, doc-gen the latter. no ugly // or /* :)","yeah that is why they invented vs code i guess :) remarkably stable imho","thanks for compiling this list! and everyone who contributed to it by building useful, cool or weird things!","yeah i guess i should plug reactnative + mobx at :)","you can mix mutables and immutables, but full immutable makes no sense with mobx. there would be nothing to observe / react to"]
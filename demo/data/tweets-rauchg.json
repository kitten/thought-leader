["wish i was there. i think jsconf.eu was my first conf. gave me an opportunity to talk about socket.io!","there's a massive opportunity today for those working on l2 solutions for bitcoin it's like we have tcp but the browser hasn't been built!","yes! check out the meta component","it needs react-virtualized","but that's only for our main codebase. next uglifies by default","starting with functional programming would be a time saver, for example.","if you are interested in v8, compilers, node.js, rust or distributed systems, we are hiring. careers@zeit.co","it can be \"thoughtconfig\" when inside `package.json` for an extra ounce of indirection","cat .thoughtrc.json { \"lead\": true }","\"what programs need functional programming? all of them!\"","i actually don't remember. very short term memory for haters","it had inline yaml package specs in script comments before they were cool. just kidding they were never cool","dynamic bits with css vars -> awesome","encoded in the url ?","although keep in mind this is cdn support for all <script> tags. more to follow","we don't support streaming yet, so we have to get the entire html tree from react first.","particularly excited about built-in etag support for server-rendered pages i.e.: clients won't download the same (dynamic!) content twice","i know react, i have the best reacts","it was fake react news","explain? he applied the optimization to every mining node, nullifying it. it's like merging asicboost into master?","yep, cache it whenever possible, invalidate it when necessary (browser resizes etc)","amazing. how did you go from 230 to 45? lazy loading code?","yep and i run into issues with this with google images","browser chrome, gestures compete with \"back\" action and trigger navigation","this idea is even more ambitious: a rendering engine that runs modern javascript frameworks, without the baggage of existing webviews.","i've been thinking this would be great for svgomg ui: \"copy as react svg component\"","sure, but you would only do that in higher-level components within your own app right? eg: <mybutton> vs <button>","how about the cdn usecase? content addressability for shared js, css, icon resources, for example, with fallback to \"old web\".","it's literally a (set of) mutation so the code is perfect congrats","ill look into rotating the api keys","you're very welcome. thanks for your patience we won't disappoint.","that technique can save us several hundred ms for hyper","react lifecycle componentdidmount + willunmount ref counting","impossible not to have a runtime, unless you want duplicate `<style>` tags per component?","sure. use next as a peer dep in that module, and you can use its api for advanced stuff!","yeah, can't argue with data. i think it's still early days in terms of best practices for these apps.","most apps out there don't even have the slick auto updater mechanism that electron gives you out of the box!","possibly a bit more sometimes, but we can get that down significantly once we have codegen cache in electron","this is terrible feedback for the electron team, with little technical analysis, and ruins their hard work and reputation.","why? replacing a div with another is a tab? they're not creating new `browserwindow` instances.","to me, electron is a wrapper for web pages with extra apis. not too different from any tab you open in your browser!","the people who object to electron apps must also not open new tabs? why blame the cost of some specific js/css on the runtime?","we take great pride in this. no new protocols (just http[/2]), no new manifests (just package.json, dockerfile).","don't design the bitmoji of who you are. design the bitmoji of who you want to become.","\"react is too big!\" \"react is too modular!\"","if you follow that thread, i believe we still have to wait for react 16 to fix it?","it's like we figured out tcp but we can't bring http and the web to the masses yet.","should code design?","let's have chrome disable dom globals in content scripts?","finally an alternative fax api!","(the tricky thing there is hot code reloading, since webpack would have to know about it somehow)","imported in js. i suppose css `` could be done too!","typically we discourage global stylesheets and encourage local components style though","npm install sketch-zeit-logo","now handles any static dir out of the box. and if you need custom stuff just drop package.json or dockerfile","a technology that's absolutely impossible to forego once you get used to it: hot module replacement.","we did. i'm pretty sure at some point we were using the dev version by mistake . next.js takes care of it for you now","i'm pretty sure it has to do with a codemod we ran that didn't fully respect jsx whitespace rules","and considering the level of optimization that's gone into node+v8 vs arc, it should be significantly faster.","i've done some tests with preact and we can get incredible throughput. confident it can be just as fast as any other ssr impl","that's what's eating up most of our time. there are some optimizations to be made to make ssr more performant though. on them.","my original goal was to demonstrate hn-like performance. unfortunately, they read from memory and i read from the firebase api","that api call seems super useful","you can, and that's what my first 4~ slides did at reactconf","can you explain more? also, did you see how we do aliase for preact / inferno ssr support in the examples?","there exist two clearly divided camps today, making completely opposite arguments, from the interpretation of the *same* \"sacred scripture\".","i think js is too popular at this point to be *loved*","although it does bother me that jsx is unlikely to be standardized in its present form","would it help to force `setstate` to always execute asynchronously during dev?","there are better alternatives, but i'm pretty sure that's the best we can do in pure-js land","yep. i think if the web learns from react, it'd be dom optimizations, low-level render apis, v8 perf improvements for certain patterns","i agree with your sentiment, but a large portion of the value proposition of the jquery api *was* baked into core","this actually keeps me from using email as my client more","but in practice i always go with the classical approach","as an hn clone author, their api has both unpredictable latency and it's difficult to query","yep more applicable to the rn case","it's unfortunately similar to contenteditable. the mutation happens and you have to deal with it after the fact","even better: just supply a `dockerfile`. sync the manifest and the code. faster, more reliable","i think that's already the case in preact","once / if consensus happens, the new rules are set in stone. if bu gets adopted, rules are not strict","custom script because of some specific needs","we just made publishing new `now` releases to npm and pushing updates to clients 100% automatic. even more frequent updates coming","easy: require('child_process').exec('ffplay warning-dev-mode.mp3') voiced by gaearon","has told me it worked with preact out of the box, for example","it's a babel transformation. works with any jsx syntax","thank you. we will not disappoint!","nope but that sounds like a good idea! we went through a lot of trouble to code sign so we should be ready","we do that automatically for `dockerfile`. we sync only the files and build automatically for you","containers are a great api for sysops, not so much for the end-user to deal with. we want users to focus on the code and product","excited about react conf on monday cto + will be there with me as well can't wait!","it's the standard protocol that makes up 90%+ of node.js applications","could be simpler: no js for ads. can be text, links, <img> or <video> w/o autoplay. not gonna happen though","this is my preference as well. but \"maintenance mode\" doesn't describe how node.js should continue","i think properly phased in breaking changes can happen. for example, show warnings for one node generation.","sure but i'm talking about the project as a whole. plus, many security fixes can't be made w/o evolving your codebase","i think that makes sense, still a bit surprising: any sub-shell will inherit that api key. maybe s. be opt-in","if you apply pointer-events: none to the ghost element, then you can trackpad over it to scroll the main view","varies per animation, we prefer `react-keyframes` for cli heavy ones","do you have an example? curious about the api to get error etc","how does one do \"loading\" w/ promise components?","thank you! just came across your `react-async-component`. very very cool!","it's hard to say w/o context of what the application does whether it's one or 3 actions really","also worth noting that lots and lots of libraries make data manipulation a breeze great that redux isn't prescriptive","check out the component term. we have a explicit redux action you can dispatch to get it for free!","a support team member is on it! we are not aware of any system issues atm, so we are looking into this depl","it's been merged and it's officially amazing. always pleased by how good and flexible of an *api* webpack has!","actually this is great, was curious if you chose that output over json for easier stream-parsing. i'll give this a shot soon","why not json output ?","yeah i love this approach","btw i see you're calling `loadall` on `componentwillmount`. i think you meant `didmount` ?","sometimes that warning happens due to `date` objects for example, since the timezone is different on server and client","nope. we just hand the props we fetched to react so that it can rebuild its representation of the ui","like you get more packages by owner facebook due to private ci install or sth like that. if data is not 100% exact same react will","oh. could it be that you have some cookie set that would make the api return something different on the client?","i personally use media queries because i think the \"mobile version\" of a website is still desirable on small desktop screens","i find that the \"most pluggable\" components in the react ecosystem use inline styles or are very simple","typically that's components that attempt to inject css and the like (or simply rely on browser globals)","the problem is when the server markup is meant to be different? e.g.: you want to lazy load something on the client","the css { } would throw syntax errors since they'd be interpreted as jsxexpressions","otherwise you have to do <style dangerouslysetinnerhtml={} />","for this case, static transformation also lets us use <style>{``}</style> w/o escaping","styled-jsx only styles the jsx tags in scope. that's why it's styled-jsx and not styled-elements","aren't you doing everything at runtime though? do styles get repeated for every component?","sure but then why isn't the api a function?","yeah the jpeg header section was extracted which can have arbitrary data. seems like a knowledgeable dev won","solvable via zero-knowledge proofs. not a design flaw.","probably a clever person who had set up a google alert and a script","exploit verifier website not served under ssl. they should have thrown in a self-signed sha1 cert at least","i'm curious: where do you perform side effects? like, for url x make api call y","app store is another usual suspect for me","with next.js our suggestion is <link prefetch>. by the time you read the data for cur. page, likely everything else is preloaded","lazy vs eager download of all the possible views of the data. i.e.: 200mb app download vs debating whether react is large.","lazy vs eager download of all the possible views of the data. i.e.: 200mb app download vs debating whether react is large.","interesting. couldn't that be solved by having the \"observable layer\" on top of redux write to immutable datastructures?","yep already is and will be exposing the apis very soon","having some issues with the domain name. made sure cdn stayed up & running. new website coming soon","one thing i'm curious about is why it's not an abstraction over redux?","do you recommend any tooling for synchronizing labels config across github projects? ok with wiping existing labels for legacy ones.","i only point it out because we recently had to turn off uglify in order to get 5x faster builds","it's also tragically slow for large codebases :(","tip: styled-jsx + react `contexttypes` for theming your components (i.e.: dark mode) works remarkably well!","btw `hpm` is not official yet. we'll rename it to `hyper` and bundle it with the app. `hyper install future`","yep seen it on some reports. has to do with npm / node installation i think. would love some more debugging info","hoc = higher-order component","a component you require on every page would be good. for example, a top-level hoc like <app>, a <page> (layout), etc","i'm sure tradeoffs are involved, but the lesson is: don't take the native apis for granted, and measure instead.","fixed tab caret focus bug on all platforms lots of improvements for windows and linux some minor new features","the idea was to resemble html i think","e.g. if you've been using webpack, yarn etc non stop all day it will show up as hyper","i would add auth but don't think hn api has it","i wish there was a project that abstracted out all the mobile tools / sdk apis and gave me a react api","best bet is for web platform to continue to evolve, and move completely away from os-specific gui apps","cc auto completion from the browser and web payments might solve it","i'll remember that. thanks","now i wonder if start / done is bound in such a way that we could do router.onroutechangeerror = nprogress.done","i don't think it's even necessary. most people build web, or web backend apis. cli sounds odd with webpack but w/e","otherwise we fall into the same critique patterns that have plagued (and failed to properly qualify) js since 1995","specially in regards to compatibility with react native","it's served *our* needs really well but i think many people will find the versatility of styled-components preferable","i was addressing 's point that the dev would be \"totally bewildered when nothing happens\"","styled-jsx tries to be as close to css as possible and has very strict isolation (no theming). we do theming through props","it's better to think in terms of `import button from ./components/button` and then <button> has some css from bootstrap inside","you serve / server-render only the styles you need, and as you transition between pages you don't have tons of css loaded","the idea is that \"global stylesheets\" are somewhat of an antipattern. you want css colocated with components so that","definitely lots of use cases, specially for larger projects like clis with lots of code, multiple node targets","might be the heuristics related to codegen cache? seems too big of a rang imo. seems more like a cache hit / miss thing","hopefully though that will *really* make compilation opt-in, and wasm as default. no slow npm install unless you opt in","other reasons are code splitting for subcommands, lazy bundle loading etc","this among other reasons is why i tweeted the other day that webpack is just as useful for \"server\"","yep, that's *precisely* why i say that the caching of the generated code is a big deal","(although that safari cache is in memory, most wins come from all the parsing + codegen stuff i reckon)","yep, that's why i said we should compare to single webpack'd file. ideal case, to binary file w/v8 optims","yep but afaik most still haven't optimized code generation. they do take away reading the source from many files tho","another example is: babel + minify (or webpack) your entire cli into a single file, then measure that","obviously we can't optimize everything, but right now we're paying some serious performance penalties for `require`","yep that's a very big win. but i wonder what it'd look like if we were able to hook into the right apis to compile node aot","finally, `yarn version` could be avoid all the requires. subcommand programs help a lot there. \"code splitting\" for cli","consider in the comparison that by \"shipping the source\", node is giving you seamless cross-platform support","this comparison doesn't make any sense to me. uber drivers don't drive people around out of passion, to develop a resume, network","yep i think it's about direct vs indirect. donating to webpack has a *real* economical gain, but too indirect perhaps","the build process has full write access. at boot up time everything is read only except /tmp","start using react with a lot less setup, and better browser-level support. esp. w script type module","another neat scenario for that: in electron you _ship the version of js_ you need. so one day we could","i'd like to use jsx for config, in a browser repl, etc. not sure if the pragma fits the bill","i think typing the elements you're including is a win, not a loss. also generalizes jsx","well with a good compiler all you would likely end up with is the mapping to the tagname","it's possible that for the react usecase those fns would return types associated with a str tag","i meant have the user do that, so that jsx can be generalized and included in browsers (dream)","this would eliminate another surprise: that capitalized behaves differently!","i wonder if the fn call approach would be doable: <div> + `import { div } from 'react/elements'`","yep i guess my point is: in many cases we're stuck with the babel settings \"completing\" the source code","it could be generalized to objects, function calls, or make the \"react.createelement\" explicit in source","in general i agree, which is why i think <jsx> compiling to `react.createelement` is odd w no \"react\" in src","you can make the same argument about searching the $symbol in the source code, which would yield the config","which is still surprising: `process.env` doesn't exist in the browser :|","arguably this type of source transformation is what babel plugins are meant for as well","i mention it on the desc. easier to make this universal and apply to server-rendering","like, i had the use case of doing expression replacement (webpack style) in babel, found my way to two great plugins within 500ms","the good thing is that in most cases you have a very precise set of keywords, so in practice google is that discovery mechanism","babel's plugin architecture was really well executed: modular yet easy to use (presets), has led to a rich ecosystem, very few compat issues","react! check out our open source project react-keyframes","shipping to third party sites or just your own component library ?","i imagine so? it's just an extra babel plugin as shown at the top","(the reason is that most components re-define what they need)","not only classnames but also cascade. `p {}` won't target any `p` contained within child components","it's likely that something like box / rect would be an impl detail of some of those components","and now rendered by next.js. feels good!","yep it uses xterm.js which hyper might be switching to as well","we have a few ideas on how to make this happen for any electron app","this is great. can't wait to be able to do this for electron apps 10x faster bootup / new hyper windows :)","can you post some benchmarks with actual code? cold cache?","holey optimizations","recipe for great design: complete focus on the message, with good typography.","i forgot: - had unicode symbol","that and ai for producing variations / suggestions of what you're designing","did you see the documentary 'happy people'? from that, i wouldn't say they were negative. and that was the russian taiga","the dockerfile is set up in such a way that dependencies are built only once, or whenever changed. makes iteration *almost* node.js-fast","very good write up. the string buffer approach for ssr is clever!","new react with virtual stack frames can do 60000fps","do you use prettier on the prettier codebase?","the use of web inspector is clever, vs introducing (usually slightly broken) in-browser repls. good stuff","so far: node, go, ruby, c, bash, dogescript. ok, no dogescript.","in your case though just do append-only when merging. it's better to have an extra entry rather than the wrong entry?","is it possible that the published version on npm is missing the `build/` directory?","based on google maps search api?","yep and we use it this way for next.js as well. it's just not obvious how necessary it becomes in more complex projects.","webpack might end up becoming jspack (or pack?). node and ss can also benefit from watch, transforms, hot reloading, bundling, lazy loading","react-compatible libs have become similar to browser engines. that question was raised a lot for those.","interesting! does that apply to larger libraries though?","the api is so low level that you can see `viewer.js` is pretty gigantic","been a while tho. api wasn't exactly easy but super super flexible and powerful. if you're short on time, use the demo reader code","@glitterbyte it's not really. 500kb minified. it's react + redux + react-redux + terminal engine + utf8 utilities + random helpers","npm is so vast that you could code, or you could run until npm install -s react-something-you-need do sleep 2 done and go back to twtr","that's the fundamental goal of babel's design (plugin architecture)","varies a lot per animation (some use typical motion design software, others are recordings of svg animations!)","even a `rm` in the fs to get rid of the cache is infinitely closer to normal use than developer modes","that's a fair point. i'd still test a device for a *consumer* report the way a consumer consumes the web.","i agree with apple. why would you test a device in developer mode, with a developer flag designed to simulate bad performance?","i wonder if maybe you could plug an alternative persistence adaptor (like redis + redis labs)","it's also not mobile friendly right? or do you serve a different website for mobile users? anyway great s","<always bet on js+web+wasm />","verticals now that the api is pretty settled. exciting times ahead","yep. we were discussing on earlier that 2017 will see a lot of electron perf optimizations across different","for a one off set state call makes you not have to refactor into a `class` (that happens a lot to me)","my complaint is: es6+ has huge buy-in, but everyone uses es6+weird-non-standard-jsx-thing-with-react-bias","(as in, would love to avoid other bulky apps for visualizing requests traffic)","with electron, the app comes with the ide . hyper comes with react + redux devtools pre-installed in dev mode.","that example actually looks neat, but once you start having a lot more markup (like a real app), jsx wins down","or skip errors, blame previous programmer(s), framework developers, etc","there's even a stronger case, therefore, to take this approach if you need more than a counter","app dev. put your caret on regexp, test it inline: if (/https:\\/\\/.*\\.rauchg\\.com/.test(orig)) { // set cors headers }","because it's extensible, themeable, single ~/.hyper.js file saves all your config (easy to port between computers), multiplatform","that maintain a much higher degree of compatibility with the content they render. if anything, css taught us divergence sucks","it sucks when components have to get re-implemented with the `$implementation-` prefix. wish it was more like browser engines","well, i suspect they apply the unremovable yellow bg to prevent `color` and other css attacks. z-index + that fixes everything","and i were just discussing opt-in scripting of the release text via a js file (eg: release.js) ;)","agreed, although the boundaries between apps and games are blurry sometimes, specially with social networks involved","sub-optimal metaphor. the train is always carrying the exact amount it was designed to carry, just longer queues at stations.","yep that's what i mean by \"universal development\". flat design being prevalent also helps since custom styling is less needed","mobx should work really well with next.js. we'll add an example.","react gets included entirely usually tho, despite dead code elimination","we need to write more about \"low level\" deets. for that we use chunks splitting, so the common code across *all pages* is 1 file","because you always end up having certain portions of site / app that require different global styles / framing","yeah in general for client side stuff i prefer using layouts: export default () => <layout></layout>","you can't render instantly if you haven't fetched the bundle of js needed to render the next thing","to be clear: i don't want to render custom stuff on the chrome. just suggest browser to show a \"busy indicator\"","the indicator is always triggered by the browser processing user content. i don't see a distinction.","can you explain the security concerns you're talking about? the proposed api only let's you _add_ the indicator","yep since we prefetch most users won't see anything unless network activity is triggered. notice what happens when i click \"submit\"","the web platform needs to give us control over the ua's spinner / progress bars. otherwise every webapp has to ship a copy of that!","by design, now.sh does not invent new apis. clone and `npm start` on `localhost` :)","a purely-clientside \"stateless password manager\"","not for the moment, but we're working on making it renderable anywhere, including a webpage","i wonder if it's just a matter of running a purposefully designed test suite on circle / travis?","also amazon. let's not get started on google search links","right but typically you can execute an arbitrary script with those right? dnd an app is just `mv`","yep but are those optimizations intractable?","as it's usually the case, no ui is the best ui. i yearn for the day the wi-fi dropdown disappears.","but is there a technical argument for impossibility?","this lends well to optimization","models like react greatly restrict what you do in `render` tho. eg: no side effects, sync, usually data transf","i think your original statement has merit, but a lot can be done in order to optimize jsx as well","this is already the case for jsx and babel optimizations for hoisting static parts right?","electron apps should all come with a \" extensions\" menu, where one can \" add extension\" and select a `.crx` file.","not beyond what's on the website but i'll expand soon","we should do a react rewrite course","it's still one of the best input mechanisms ever deployed to the web. most clones have been lacking in many ways","instead of `npm run dev`, `npm run build`, you set up up the alias, and you run `r dev`, `r build`","4. we didn't really have to author a plugin system and define custom hooks and apis. the actions *are* the hooks.","3. the architecture that enables this is simple: plugin authors just define custom redux middleware that can intercept any action","i also til about functional components in vue","we just moved away from a global shares next.js bundle due to this. with dead code elimination things are different","i would just retain this perfect design and improve memory / cpu over time. ditch mb pro line / touch bar entirely","price is one of the ways the market signals belief and conviction in the technology","idea: consume the wp rest api via next.js","what you want is an omniscient ai, and i'm happy to announce we're working on it","never attribute to conscious design that which is adequately explained by random chance and natural selection.","it's not design, it was natural selection","users shouldn't go to a source code repository (github) to file issues. not sure what your point is?","i think better tooling / insight / time-traveling around the diff algorithm is the real solution for better perf","all examples are universally rendered. the main difference is that `componentdidmount` only fires on client","even then you still need to be able to say what state you want the component to be in *during* fetching","but even with styled-components you won't want to parse at runtime right?","why not? should be easy to add babel transformations","favorite thing about `styled-jsx`: it neatly preserves selectors, therefore the css inspector remains easy to understand","therefore you start your dev session with more information ;)","therefore, you can get feedback as you _start_ developing, before you get into troubles that could be fixed by the update","there were a few issues. my approach is stateless. use a max timer and check every time. no auto-output","one weird trick that helps you not always test the happy path of your apps and projects: constantly demo and present them to others.","we're on it: after.js","it's funny that there are so many new frameworks that it's somewhat believable that one could re-write an app so many times :d","(this is one of the main benefits of themes just being js plugins )","it gets the data from github and server-renders it. stars, projects, are always up to date. no need to constantly re-build to static html","both are great. styled can give you more agility, glamor types and low level api","hyper has had the privilege of having an extraordinary designer as a contributor:","yep it's a weird race condition. should be easy to fix though. we just need to record the redux actions log and replay","yep exactly, short of abandoning js syntax / language","the \"self-invoked\" part vs \"i'm just passing a function to the component\" is subtle","for jsx it would be a game-changer for many people","use the language, or learn how the language can / is evolving. `do` expressions fix many recurring jsx complaints, for instance","i should add it. aphrodite made me realize that static css + customization via inline style works really well (as seen in hyper)","in other words, integration is the sum of all the units that make a certain api _work_. best to start higher","yeah, i've had some really really ugly stateless components","what's neat about that is that we avoid the whole ejection+upgrades problem, and the build step and jest can share 1 cfg","yep. we could even avoid publishing it to npm i think! { presets: [\"next/babel\"] }","i think it should be fairly easy to have a `.babelrc` that just inherits a preset from babel","it's rauch's happy day","and slowness is not a defining property of integration tests, but a property of how most systems are designed.","well, you're only interested in behavior that _can happen_ right? that means testing at the user / consumer boundary, not internals","for example, test `get /` and `post /login`, don't test `require('./login')()`, in the context of a webapp","internal modules that are not exposed to the consumer of the app or library","exactly. the goal is to complete / approximate the _proof_. if you duplicate the proof, what's the point?","integration tests public apis. unit knows about implementation details. integration tests tend to also test units work","i think it's definitely app-specific, including the \"too many\". integration tests tend to \"contain\" the unit tests, => easier","content-addressable, so instead of `react-14.js` it should be the sha","`ipfs://` + dynamic script injection. sniff for browser plugin, inject `ipfs` or fallback","except the build might not run on electron's node","we try to never rely on public cdns alone, and fall back to a <script> pointing to the root domain","sorry the gh api rate-limited us. cached it.","yeah, optimizing *too much* for that variable can have nasty effects as well :d","probably not. but the api is great","no, i think in the end it's always about a positive emotional experience. that's the human component.","solid advice. slide #22 is . and agreed on self-documenting code / apis very much","this is absolutely correct. this was similar to the advantage i pointed out about \"css-in-js\".","what i like about hs is that it's _real_ js, and with a babel transformation it can be very efficient i presume","both have pros and cons. css-in-js benefits from host language features. pure css is faster to write / iterate on","yep that's my main point really. jsx allows that kind of power by giving you the abstraction over html, among other things.","you need to be able to reuse the template (=> component) and \"revive\" the server-rendered html on the client (=> lifecycle)","imagine rendering a list of posts. then you want those posts to update on the client based on new incoming data","universal rendering. i can take that same component and render it on the server or on the client","most pages in php perform side effects and evaluate to html directly. very hard to test. the component arch avoids this problem.","you can then work with that tree directly within javascript. it is, after all, just javascript that's easier to write","the key is that jsx is not a markup lang. it translates into function calls, which in turn yield an abstract object representation","the \"very similar\" is where it breaks down for powerful client-side interaction, realtime updates / subscriptions, etc","but i understand your point and it's very valid, and a concern i've had. the \"reusable react native + web\" looks very different","it depends on how far you want to take the abstraction, of course. it's still more powerful for the \"just html and css\" subset","that's the difference between html and jsx","the first one yields a string. the second one, a functional component that's composable, testable, has a lifecycle and is dual-rendered.","the triumph of jsx is making it *look* like it's \"html-in-js\", but at the same time providing a powerful abstraction over it.","counter-argument: moving target, whitelists bloat build-size","as a workaround you could fetch the element and add the class upon mount of a wrapper component","i love side-by-side preview for this particular purpose, and that's all this app does","i think he wants .css not to pass for example","another new vector is fake wallets on \"reviewed\" app stores","\"can have some benefits\" is a major understatement. imagine facebook throwing away modal chats / friend sidebar state","it'd be worth mentioning that dynamic loading of pages allows developers to maintain global state w/o persistence","these were native macos. command+shift+4 + spacebar to capture a window with its shadows. 4 puts it into clipboard, 3 into fs","@qln_io \\_()_/ can't remember :d","i think there are pros and cons to each approach. i wanted to suppor full css in addition to css-in-js","it's very neat in tandem with hoc to \"pierce\" the shadow <p>styled</p> <hoc> <p>styled</p> </hoc> <style jsx>{'p { color: red }'}</style>","oh yeah. the \"but for components\" part is how i intended to communicate the limits of the cascade.","sorry maybe i forgot the details of how it worked (since it got removed). but i thought scoped styles applied only to sub-tree?","much harder for the babel transformation, but would love to have that","i call it clipboard anxiety and it applies both to os clipboards and git stash","cue <we just have better diagnosing tech and protocols argument>","this looks so random that i wonder if they now have a markov-code generator for movies","you can run `now -d` to see exactly what's happening","that's solved through dependencies. when the app gets used, payments would trickle down. author only spends@dev time?","that limits the reach to people who can access debit cards and bank accounts. that's not a good api","bitcoin can be layered via merge-mining and sidechains. protocol experimentation with minimal risk. http analogy: `upgrade: websocket`","our internet infrastructure is missing the critical funding and payment apis. we get the cake, we eat it and then we don't pay for it!","effective and sustainble open source development requires effective funding. and are leading the way.","also this is why we love react as a universal model for ui in the first place","not the only bottleneck with large codebases +frameworks on mobile. good if you can defer js (eg: next.js), but not all apps can","deflating and parsing through code takes time, therefore it can be deceptive","should we stop reporting how much \"gzipped js\" we ship, and use total size as the default?","the technical answer would be synchronization with . dawn - 1h sounds pretty chill. doesn't work for all geographical regions tho","it's extremely tedious to build something like coveralls. i'd gladly pay :)","it's extremely tedious to build something like coveralls. i'd gladly pay :)","there are some exceptions but ideally we don't get into situations where we're locked-in without alternative but to complain","yep. i like the `requestidlecallback` pr in preact, but not sure about the getter","all i remember finding is the ny times mocking ford on a column over the idea. more research needed","was pretty obvious right? i uber pool for 3 dollars in sf","not with the draft approach","i'm intrigued to hear 's notes on key optimizations he did for inferno as well","most of these have happened in the last few months exciting times ahead","i really like your tweet references library","my main issue is that some apis (like hn) return seconds vs js defaulting to ms. iso 8601 is absolute","js = no 64 bit integers","if i look at a json object and see { date: big negative number } my instinct is to think that something went wrong","and also whether you use ms or s since epoch can be confusing. hn api uses seconds and threw me off recently","it'd be interesting to read the list for other browsers as well","every time someone complains about web apis i'm going to point them to that document's format and struct :)","this time is different. jsx maps to (almost) js objects. syntax sugar for nicer code, not magic","one weird trick to make wifi ux better: os shouldn't remember/prioritize networks that don't make it past splash / auth. like \"cablewifi\"","yep, it'd be interesting to try it without a major departure from a typed react-ish api","my other theory was an editor integration. the interesting thing about the ecosystem is that you have so many options :d","is the sidebar from a particular react ui toolkit? works really nicely. material ui?","but like i've said, i see a lot of good in css. in the \"js component world\", css-in-js makes a lot of sense right now, however.","well, they tend to have the same interface (handles, sizes, fit the same toolbox gaps), so that metaphor is more apt to my viewpoint","no. you still need to learn css. you just have one interface now.","ie: inside your pages you'll be able to use aphrodite, styled-components, typestyle, etc","i was referring to js (objects), not actual css strings inside js. so i enforce the same rules and codestyle as js code","yep. works aaaalmost out of the box on web, you just have to replace `rpc` to use websockets instead of electron rpc","nope, i was describing a potential api / target","you can decorate the function with callbacks that change state or perform redux actions (see )","in the future you could have a \"stateful\" functional approach with `this({ state })` () approach or","that happened to work great for my style definitions 2/2","i didn't have to build a module system, linter, property autocompleter. those were all js features 1/2","i see css-in-js as a great bridge until we get the features we need in the specs and engines","we tried the compilation approach, it was much slower and error prone than css-in-js","even if you don't opt in to a lot of css, a basic task like scoped css is not tractable today","tl;dr: in 2016 we still can't render \"subdocuments\" to which only a subset of css applies. will change","*or* pay a big performance penalty in the conversion step, which is what happened to us.","you could, theoretically, still use good ol' css, but you would re-invent many of those things"]